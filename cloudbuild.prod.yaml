options:
  logging: CLOUD_LOGGING_ONLY
timeout: "1800s"

steps:
  # 1) Build
  - name: gcr.io/cloud-builders/docker
    id: Build Image
    args: ["build","-t","europe-west6-docker.pkg.dev/$PROJECT_ID/foodbot/foodbot:$COMMIT_SHA","."]

  # 2) Push
  - name: gcr.io/cloud-builders/docker
    id: Push Image
    args: ["push","europe-west6-docker.pkg.dev/$PROJECT_ID/foodbot/foodbot:$COMMIT_SHA"]

  # 3) Deploy 0% (kein Traffic) + Tag "cand"
  - name: gcr.io/google.com/cloudsdktool/cloud-sdk:slim
    id: Deploy 0%
    entrypoint: gcloud
    args: [
      "run","deploy","foodbot",
      "--region=europe-west6",
      "--image=europe-west6-docker.pkg.dev/$PROJECT_ID/foodbot/foodbot:$COMMIT_SHA",
      "--set-env-vars=PERSISTENCE=firestore,SHEETS_CACHE_TTL_SEC=3600,SHEETS_CACHE_NAMESPACE=v1",
      "--no-traffic",
      "--tag=cand",

      # Performance/Energies: wie in deiner funktionierenden Pipeline
      "--concurrency=2",                    #Wieviele gleichzeitige Anfragen eine Instanz bearbeitet. Klein (=1‚Äì4) ‚Üí geringe Latenz pro Request; gro√ü (=20‚Äì80) ‚Üí bessere Kosteneffizienz, aber h√∂heres Queuing.
      "--cpu=2",                            #Rechenleistung & RAM je Instanz. Mehr CPU beschleunigt CPU-gebundene Teile (Parsing, Crypto, Kompression). RAM gibt Headroom f√ºr Libs/Modelle.
      "--memory=1Gi",                       #siehe cpu
      "--min-instances=1",                  #So viele warme Instanzen st√§ndig vorhalten (verhindert Kaltstart-Spikes).
      #"--max-instances=100",               #Obergrenze der Skalierung. Zu niedrig ‚Üí Throttling/Queue; moderat hoch ‚Üí f√§ngt Spitzen ab.  
      "--no-cpu-throttling",                #CPU bleibt auch ohne laufende Requests aktiv ‚Üí schnelleres ‚ÄûAnlaufen‚Äú und stabilere P99-Latenz.
      "--execution-environment=gen2",       #Moderne Runtime mit k√ºrzerer Startup-Zeit.
      "--cpu-boost",                        #Extra CPU w√§hrend Startup/Scale-Out ‚Üí schnellere Aufw√§rmung neuer Instanzen.
      "--port=8080",
      "--allow-unauthenticated",
      "--set-secrets=TELEGRAM_API_KEY=TELEGRAM_API_KEY_PROD:latest,TELEGRAM_WEBHOOK_SECRET=TELEGRAM_WEBHOOK_SECRET_PROD:latest,GOOGLE_CRED_JSON=GOOGLE_CRED_JSON_PROD:latest,OPENAI_API_KEY=OPENAI_API_KEY_PROD:latest,GITHUB_TOKEN=GITHUB_TOKEN:latest",
      "--quiet"
    ]

  # 4) Kandidat routbar machen: 0% an cand h√§ngen (live bleibt 100%)
  - name: gcr.io/google.com/cloudsdktool/cloud-sdk:slim
    id: Attach 0% route to candidate
    entrypoint: bash
    args:
      - "-c"
      - >
        set -euo pipefail;
        region=europe-west6; service=foodbot;
        cand="$(gcloud run services describe "$service" --region "$region" --format='value(status.latestCreatedRevisionName)')";
        live="$(gcloud run services describe "$service" --region "$region" --format='value(status.latestReadyRevisionName)')";
        echo "candidate=$cand live=$live";
        test -n "$cand" || { echo "‚ùå no candidate revision"; exit 10; };
        if [ -n "$live" ] && [ "$live" != "$cand" ]; then
          echo "‚Üí set traffic: $live=100, $cand=0";
          gcloud run services update-traffic "$service" --region "$region" --to-revisions "$live=100,$cand=0";
        else
          echo "‚Üí ensure $cand is attached with 0%";
          gcloud run services update-traffic "$service" --region "$region" --to-revisions "$cand=0";
        fi;
        printf '%s' "$cand" > /workspace/cand.txt;

  # 5) Ready ‚Üí Health (Revision-URL) ‚Üí (Promote sp√§ter)
  - name: gcr.io/google.com/cloudsdktool/cloud-sdk:slim
    id: Ready + Health check
    entrypoint: bash
    args:
      - -c
      - |
        set -eo pipefail   # kein -u, um leere Describes abzufangen
        region=europe-west6
        service=foodbot
        cand="$(cat /workspace/cand.txt)"

        echo "‚è≥ waiting for $cand to be Ready..."
        ready=""
        for i in $(seq 1 80); do
          js="$(gcloud run revisions describe "$cand" --region="$region" --format=json 2>/dev/null || true)"
          if [ -z "$js" ]; then
            printf '  [%02d/80] describe returned empty (retry)\n' "$i"
            sleep 6
            continue
          fi
          ready="$(printf '%s' "$js" | python3 -c 'import sys,json; c=json.load(sys.stdin); print(next((x.get("status","") for x in c.get("status",{}).get("conditions",[]) if x.get("type")=="Ready"), ""))')"
          printf '  [%02d/80] Ready=%s\n' "$i" "${ready:-?}"
          [ "$ready" = "True" ] && break
          sleep 6
        done

        if [ "$ready" != "True" ]; then
          echo "üìú recent logs for $cand:"
          gcloud logging read \
            'resource.type="cloud_run_revision" AND resource.labels.revision_name="'$cand'"' \
            --limit=50 --order=desc --format='value(textPayload)' || true
          echo "‚ùå Timeout waiting for Ready"; exit 23
        fi

        # Health-Check (Revision-URL)
        cand_url="$(gcloud run revisions describe "$cand" --region="$region" --format='value(status.url)')"
        echo "ü©∫ GET ${cand_url%/}/webhook/health"
        code="$(curl -sS -m 15 -o /dev/null -w '%{http_code}' "${cand_url%/}/webhook/health" || echo 000)"
        echo "‚Üí HTTP $code"
        if [ "$code" != "200" ]; then
          echo "‚ùå health != 200"; exit 22
        fi

  # 6) Promote: Traffic ‚Üí 100% auf Kandidat
  - name: gcr.io/google.com/cloudsdktool/cloud-sdk:slim
    id: Promote to 100%
    entrypoint: bash
    args:
      - -c
      - |
        set -euo pipefail
        region=europe-west6
        service=foodbot
        cand="$(cat /workspace/cand.txt)"
        echo "üîÅ traffic ‚Üí $cand=100"
        gcloud run services update-traffic "$service" --region "$region" --to-revisions "$cand=100"
        echo "‚úÖ Traffic 100% auf $cand"

images:
  - "europe-west6-docker.pkg.dev/$PROJECT_ID/foodbot/foodbot:$COMMIT_SHA"
