timeout: "1800s"

steps:
  # 1) Build
  - name: gcr.io/cloud-builders/docker
    id: Build Image
    args: [
      "build","-t","europe-west6-docker.pkg.dev/$PROJECT_ID/foodbot/foodbot:$COMMIT_SHA","."
    ]

  # 2) Push
  - name: gcr.io/cloud-builders/docker
    id: Push Image
    args: [
      "push","europe-west6-docker.pkg.dev/$PROJECT_ID/foodbot/foodbot:$COMMIT_SHA"
    ]

  # 3) Deploy ohne Traffic (keine Tags)
  - name: gcr.io/google.com/cloudsdktool/cloud-sdk:slim
    id: Deploy 0%
    args:
      - run
      - deploy
      - foodbot
      - --region=europe-west6
      - --image=europe-west6-docker.pkg.dev/$PROJECT_ID/foodbot/foodbot:$COMMIT_SHA
      - --no-traffic
      - --set-secrets=TELEGRAM_API_KEY=TELEGRAM_API_KEY:latest,OPENAI_API_KEY=OPENAI_API_KEY:latest,GITHUB_TOKEN=GITHUB_TOKEN:latest,TELEGRAM_WEBHOOK_SECRET=TELEGRAM_WEBHOOK_SECRET:latest,GOOGLE_CRED_JSON=GOOGLE_CRED_JSON:latest
      - --quiet

  # 4) Ready-Polling (JSON), Health-Check, dann 100% Traffic
  - name: gcr.io/google.com/cloudsdktool/cloud-sdk:slim
    id: Ready + Health + Traffic
    entrypoint: bash
    args:
      - -ceu
      - |
        REGION="europe-west6"
        SERVICE="foodbot"

        CAND="$(gcloud run services describe "$SERVICE" --region "$REGION" --format='value(status.latestCreatedRevisionName)')"
        test -n "$CAND" || { echo "‚ùå Keine Kandidaten-Revision."; exit 10; }
        echo "üë§ Candidate: $CAND"

        jget () {
          python3 - "$1" << 'PY'
  import sys, json
  field = sys.argv[1]
  d = json.load(sys.stdin)
  conds = d.get("status", {}).get("conditions", [])
  def val(t, k):
      for c in conds:
          if c.get("type")==t:
              return c.get(k, "")
      return ""
  if field=="ready.status":  print(val("Ready","status"))
  elif field=="ready.reason": print(val("Ready","reason"))
  elif field=="active.status":print(val("Active","status"))
  elif field=="url":          print(d.get("status",{}).get("url","") or d.get("status",{}).get("address",{}).get("url",""))
  PY
        }

        echo "‚è≥ warte bis Ready‚Ä¶"
        for i in $(seq 1 80); do
          JSON="$(gcloud run revisions describe "$CAND" --region "$REGION" --format=json || true)"
          READY="$(printf '%s' "$JSON" | jget ready.status | tr -d '\r')"
          RREASON="$(printf '%s' "$JSON" | jget ready.reason | tr -d '\r')"
          ACTIVE="$(printf '%s' "$JSON" | jget active.status | tr -d '\r')"
          printf "  [%02d/80] Ready=%s Active=%s Reason=%s\n" "$i" "${READY:-?}" "${ACTIVE:-?}" "${RREASON:- -}"
          [ "$READY" = "True" ] && break
          sleep 2
        done

        [ "$READY" = "True" ] || { 
          echo "üìú Letzte Logs f√ºr $CAND:"
          gcloud logging read \
            "resource.type=cloud_run_revision AND resource.labels.service_name=$SERVICE AND resource.labels.revision_name=$CAND" \
            --limit=100 --freshness=30m --format="value(textPayload)" || true
          echo "‚ùå Ready not reached"; exit 21; 
        }

        REV_URL="$(printf '%s' "$JSON" | jget url)"
        test -n "$REV_URL" || { echo "‚ùå Keine Revision-URL."; exit 23; }
        echo "üåê Revision-URL: $REV_URL"

        echo "ü©∫ Health (Kandidat): GET ${REV_URL%/}/webhook/health"
        CODE_CAND="$(curl -sS -m 15 -o /dev/null -w '%{http_code}' "${REV_URL%/}/webhook/health" || true)"
        echo "   ‚Üí HTTP $CODE_CAND"
        [ "$CODE_CAND" = "200" ] || { echo "‚ùå Health-Check fehlgeschlagen."; exit 24; }

        echo "üîÅ Traffic ‚Üí $CAND (100%) ..."
        gcloud run services update-traffic "$SERVICE" --region "$REGION" --to-revisions "$CAND=100"
        echo "üéâ Fertig ‚Äì 100% Traffic auf $CAND"

images:
  - "europe-west6-docker.pkg.dev/$PROJECT_ID/foodbot/foodbot:$COMMIT_SHA"
