# Cloud Build: Blue/Green mit tag-basiertem Health-Check und hartem 100%-Switch
# Region/Service hart codiert (europe-west6 / foodbot). Keine freien substitutions.
timeout: "1800s"  # 30 min Puffer

steps:
  # 1) Docker build & push nach Artifact Registry
  - name: gcr.io/cloud-builders/docker
    id: Build Image
    args:
      - "build"
      - "-t"
      - "europe-west6-docker.pkg.dev/$PROJECT_ID/foodbot/foodbot:$COMMIT_SHA"
      - "."
  - name: gcr.io/cloud-builders/docker
    id: Push Image
    args:
      - "push"
      - "europe-west6-docker.pkg.dev/$PROJECT_ID/foodbot/foodbot:$COMMIT_SHA"

  # 2) Deploy nach Cloud Run mit 0% Traffic + TAG=cand (nur f√ºr Health-Check-Routing)
  - name: gcr.io/google.com/cloudsdktool/cloud-sdk:slim
    id: Deploy 0% + tag=cand
    entrypoint: bash
    args:
      - -ceu
      - |
        set -o pipefail
        REGION="europe-west6"
        SERVICE="foodbot"
        IMG="europe-west6-docker.pkg.dev/$PROJECT_ID/foodbot/foodbot:$COMMIT_SHA"

        echo "‚Üí Deploy ${SERVICE} in ${REGION} mit Image ${IMG} (0% Traffic, tag=cand)"
        gcloud run deploy "${SERVICE}" \
          --region="${REGION}" \
          --image="${IMG}" \
          --no-traffic \
          --tag="cand" \
          --set-secrets=TELEGRAM_API_KEY=TELEGRAM_API_KEY:latest,OPENAI_API_KEY=OPENAI_API_KEY:latest,GITHUB_TOKEN=GITHUB_TOKEN:latest,TELEGRAM_WEBHOOK_SECRET=TELEGRAM_WEBHOOK_SECRET:latest,GOOGLE_CRED_JSON=GOOGLE_CRED_JSON:latest \
          --quiet

        CAND="$(gcloud run services describe "${SERVICE}" --region "${REGION}" --format='value(status.latestCreatedRevisionName)')"
        echo "üÜï Candidate-Revision: ${CAND}"
        echo "CAND=${CAND}" > /workspace/_cand.env

  # 3) Warten bis Ready=True (Active ist dank Tag ‚âà True) + Health-Check gegen cand-URL
  - name: gcr.io/google.com/cloudsdktool/cloud-sdk:slim
    id: Ready + Health + Traffic
    entrypoint: bash
    args:
      - -ceu
      - |
        set -o pipefail
        REGION="europe-west6"
        SERVICE="foodbot"
        source /workspace/_cand.env
        echo "CAND: ${CAND}"

        # Fehlerfalle: Bei Problemen Logs der Candidate-Revision ausgeben
        dump_logs() {
          echo "== Recent logs for ${CAND} =="
          gcloud logging read \
            'resource.type="cloud_run_revision" AND resource.labels.service_name='"${SERVICE}"' AND resource.labels.revision_name='"${CAND}" \
            --project="$PROJECT_ID" \
            --limit=200 --format='value(textPayload)' || true
        }
        trap 'dump_logs' ERR

        # 3a) Ready-Poll (max ~8 Minuten)
        for i in $(seq 1 80); do
          READY=$(gcloud run revisions describe "${CAND}" --region "${REGION}" --format='value(status.conditions[?type=Ready].status)')
          R_REASON=$(gcloud run revisions describe "${CAND}" --region "${REGION}" --format='value(status.conditions[?type=Ready].reason)')
          C_REASON=$(gcloud run revisions describe "${CAND}" --region "${REGION}" --format='value(status.conditions[?type=ContainerReady].reason)')
          ACTIVE=$(gcloud run revisions describe "${CAND}" --region "${REGION}" --format='value(status.conditions[?type=Active].status)')
          A_REASON=$(gcloud run revisions describe "${CAND}" --region "${REGION}" --format='value(status.conditions[?type=Active].reason)')

          printf "  [%02d/80] Ready=%s (Reason=%s)  Active=%s (Reason=%s)\n" "$i" "${READY:-"-"}" "${R_REASON:-"-"}" "${ACTIVE:-"-"}" "${A_REASON:-"-"}"

          # sofort failen, wenn HealthCheckContainerError signalisiert wird
          if [[ "${R_REASON}" == "HealthCheckContainerError" || "${C_REASON}" == "HealthCheckContainerError" ]]; then
            echo "‚ùå HealthCheckContainerError in Revision-Zustand ‚Äì breche ab."
            exit 21
          fi

          # paralleler Deploy ‚Üí Kandidat zur√ºckgezogen
          if [[ "${R_REASON}" == "Retired" || "${A_REASON}" == "Retired" ]]; then
            echo "‚ùå Candidate wurde Retired (vermutlich paralleler Deploy)."
            exit 21
          fi

          if [[ "${READY}" == "True" ]]; then
            echo "‚úÖ Ready=True"; break
          fi
          sleep 6
        done

        if [[ "${READY}" != "True" ]]; then
          echo "‚ùå Ready nicht erreicht"; exit 21
        fi

        # 3b) Health-Check gegen TAG-URL (cand---<service-host>)
        SERVICE_URL="$(gcloud run services describe "${SERVICE}" --region "${REGION}" --format='value(status.url)')"
        HOST="${SERVICE_URL#https://}"
        CAND_URL="https://cand---${HOST}"
        echo "‚Üí Health-Check: GET ${CAND_URL}/webhook/health"
        CODE=$(curl -sS -o /dev/null -w "%{http_code}" --max-time 15 "${CAND_URL%/}/webhook/health" || echo "000")
        echo "HTTP ${CODE}"
        if [[ "${CODE}" != "200" ]]; then
          echo "‚ùå Health != 200 ‚Äì kein Traffic-Shift."; exit 22
        fi

        # 3c) Harte Umschaltung 100% auf Candidate
        echo "‚Üí Traffic umschalten auf ${CAND}=100%"
        gcloud run services update-traffic "${SERVICE}" --region "${REGION}" --to-revisions "${CAND}=100" --quiet
        echo "‚úÖ Traffic 100% auf ${CAND}"

images:
  - "europe-west6-docker.pkg.dev/$PROJECT_ID/foodbot/foodbot:$COMMIT_SHA"
