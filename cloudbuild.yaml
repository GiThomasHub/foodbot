options:
  logging: CLOUD_LOGGING_ONLY
  substitutionOption: ALLOW_LOOSE
timeout: "1800s"

steps:
  # 1) Build & Push
  - id: build image
    name: gcr.io/cloud-builders/docker
    args: ["build","-t","europe-west6-docker.pkg.dev/$PROJECT_ID/foodbot/foodbot:$COMMIT_SHA","."]

  - id: push image
    name: gcr.io/cloud-builders/docker
    args: ["push","europe-west6-docker.pkg.dev/$PROJECT_ID/foodbot/foodbot:$COMMIT_SHA"]

  # 2) Deploy (0%) + Tag cand an Kandidatenrevision h√§ngen
  - id: deploy 0% + tag=cand
    name: gcr.io/google.com/cloudsdktool/cloud-sdk:slim
    entrypoint: bash
    args:
      - -ceu
      - |
        set -o pipefail
        region="europe-west6"
        service="foodbot"
        img="europe-west6-docker.pkg.dev/$PROJECT_ID/foodbot/foodbot:$COMMIT_SHA"

        echo "‚Üí deploy ${service} in ${region} (no-traffic) image=${img}"
        gcloud run deploy "${service}" \
          --region="${region}" \
          --image="${img}" \
          --no-traffic \
          --port=8080 \
          --allow-unauthenticated \
          --set-secrets=TELEGRAM_API_KEY=TELEGRAM_API_KEY:latest,OPENAI_API_KEY=OPENAI_API_KEY:latest,GITHUB_TOKEN=GITHUB_TOKEN:latest,TELEGRAM_WEBHOOK_SECRET=TELEGRAM_WEBHOOK_SECRET:latest,GOOGLE_CRED_JSON=GOOGLE_CRED_JSON:latest \
          --quiet

        cand="$(gcloud run services describe "${service}" --region "${region}" --format='value(status.latestCreatedRevisionName)')"
        live="$(gcloud run services describe "${service}" --region "${region}" --format='value(status.latestReadyRevisionName)')"
        echo "candidate=${cand}  live=${live}"
        test -n "${cand}" || { echo "‚ùå no candidate revision"; exit 10; }

        # Tag 'cand' anh√§ngen (0%); live bleibt 100%
        if [ -n "${live}" ] && [ "${live}" != "${cand}" ]; then
          gcloud run services update-traffic "${service}" --region "${region}" \
            --to-revisions "${live}=100,${cand}=0" \
            --tag "${cand}=cand"
        else
          gcloud run services update-traffic "${service}" --region "${region}" \
            --add-tag "${cand}=cand"
        fi

        printf '%s' "${cand}" > /workspace/cand.txt

  # 3) Ready ‚Üí Health ‚Üí Traffic=100 (ohne Heredocs)
  - id: ready + health + traffic
    name: gcr.io/google.com/cloudsdktool/cloud-sdk:slim
    entrypoint: bash
    args:
      - -ceu
      - |
        set -o pipefail
        region="europe-west6"
        service="foodbot"
        cand="$(cat /workspace/cand.txt)"
        echo "track candidate: ${cand}"

        dump_logs() {
          echo "== recent logs for ${cand} =="
          gcloud logging read \
            "resource.type=cloud_run_revision AND resource.labels.service_name=${service} AND resource.labels.revision_name=${cand}" \
            --limit=200 --order=desc --format='value(textPayload)' || true
        }
        trap 'dump_logs' ERR

        # JSON-Parsing via Python One-Liner (keine Heredocs)
        get_ready_status() {
          python3 -c 'import sys,json; d=json.load(sys.stdin); print(next((c.get("status","") for c in d.get("status",{}).get("conditions",[]) if c.get("type")=="Ready"), ""))'
        }
        get_ready_reason() {
          python3 -c 'import sys,json; d=json.load(sys.stdin); print(next((c.get("reason","") for c in d.get("status",{}).get("conditions",[]) if c.get("type")=="Ready"), ""))'
        }
        get_active_status() {
          python3 -c 'import sys,json; d=json.load(sys.stdin); print(next((c.get("status","") for c in d.get("status",{}).get("conditions",[]) if c.get("type")=="Active"), ""))'
        }

        # Parallel-Deploy verhindern & auf Ready warten (~8 Min)
        for i in $(seq 1 80); do
          latest="$(gcloud run services describe "${service}" --region "${region}" --format='value(status.latestCreatedRevisionName)')"
          if [ -n "${latest}" ] && [ "${latest}" != "${cand}" ]; then
            echo "‚ùå parallel deploy detected: latest=${latest} expected=${cand}"
            exit 24
          fi

          js="$(gcloud run revisions describe "${cand}" --region "${region}" --format=json || true)"
          ready="$(printf '%s' "${js}" | get_ready_status | tr -d '\r')"
          rreason="$(printf '%s' "${js}" | get_ready_reason | tr -d '\r')"
          astatus="$(printf '%s' "${js}" | get_active_status | tr -d '\r')"

          printf '  [%02d/80] Ready=%s  ReadyReason=%s  Active=%s\n' "$i" "${ready:-?}" "${rreason:--}" "${astatus:--}"

          [ "${rreason:-}" = "HealthCheckContainerError" ] && { echo "‚ùå HealthCheckContainerError"; exit 20; }
          [ "${ready}" = "True" ] && break
          sleep 6
        done
        [ "${ready}" = "True" ] || { echo "‚ùå Ready not reached"; exit 21; }

        # cand-URL (Tag) ermitteln und Health pr√ºfen
        svc_url="$(gcloud run services describe "${service}" --region "${region}" --format='value(status.url)')"
        host="${svc_url#https://}"
        cand_url="https://cand---${host}"
        echo "ü©∫ GET ${cand_url%/}/webhook/health"
        code="$(curl -sS -o /dev/null -w '%{http_code}' --max-time 15 "${cand_url%/}/webhook/health" || echo 000)"
        echo "‚Üí HTTP ${code}"
        [ "${code}" = "200" ] || { echo "‚ùå health != 200"; exit 22; }

        echo "üîÅ traffic ‚Üí ${cand}=100"
        gcloud run services update-traffic "${service}" --region "${region}" --to-revisions "${cand}=100"
        echo "‚úÖ Traffic 100% auf ${cand}"

images:
  - europe-west6-docker.pkg.dev/$PROJECT_ID/foodbot/foodbot:$COMMIT_SHA
