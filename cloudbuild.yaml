options:
  logging: CLOUD_LOGGING_ONLY
  substitutionOption: ALLOW_LOOSE
timeout: "1200s"

steps:
  - id: "Build image"
    name: "gcr.io/cloud-builders/docker"
    args: ["build","-t","europe-west6-docker.pkg.dev/$PROJECT_ID/foodbot/foodbot:$COMMIT_SHA","."]

  - id: "Push image"
    name: "gcr.io/cloud-builders/docker"
    args: ["push","europe-west6-docker.pkg.dev/$PROJECT_ID/foodbot/foodbot:$COMMIT_SHA"]

  - id: "Deploy (0% traffic)"
    name: "gcr.io/google.com/cloudsdktool/cloud-sdk:slim"
    entrypoint: bash
    args:
      - -ceu
      - |
        set -eo pipefail
        echo "üñº  image: europe-west6-docker.pkg.dev/$PROJECT_ID/foodbot/foodbot:$COMMIT_SHA"

        gcloud run deploy foodbot \
          --region=europe-west6 \
          --image="europe-west6-docker.pkg.dev/$PROJECT_ID/foodbot/foodbot:$COMMIT_SHA" \
          --no-traffic \
          --port=8080 \
          --allow-unauthenticated \
          --set-secrets=TELEGRAM_API_KEY=TELEGRAM_API_KEY:latest,OPENAI_API_KEY=OPENAI_API_KEY:latest,GITHUB_TOKEN=GITHUB_TOKEN:latest,TELEGRAM_WEBHOOK_SECRET=TELEGRAM_WEBHOOK_SECRET:latest,GOOGLE_CRED_JSON=GOOGLE_CRED_JSON:latest

        cand="$(gcloud run services describe foodbot --region europe-west6 --format='value(status.latestCreatedRevisionName)')"
        echo "üë§ candidate: ${cand}"
        test -n "${cand}" && printf '%s' "${cand}" > /workspace/candidate.txt

  - id: "Ready + Health + Traffic"
    name: "gcr.io/google.com/cloudsdktool/cloud-sdk:slim"
    entrypoint: bash
    args:
      - -ceu
      - |
        set -euo pipefail
        cand="$(cat /workspace/candidate.txt)"
        echo "üîé tracking candidate: ${cand}"

        dump_logs() {
          echo "üìú last logs for ${cand}:"
          gcloud logging read \
            "resource.type=cloud_run_revision AND resource.labels.service_name=foodbot AND resource.labels.revision_name=${cand}" \
            --limit=200 --order=desc --format='value(textPayload)' || true
        }
        trap 'echo "‚ùå error"; dump_logs' ERR

        # Wartefenster ~8 Min, detecte auch parallele Deploys/Retire
        for i in $(seq 1 80); do
          # 1) Wurde eine andere Revision erstellt? (Parallel-Deploy)
          latest="$(gcloud run services describe foodbot --region europe-west6 --format='value(status.latestCreatedRevisionName)')"
          if [[ -n "${latest}" && "${latest}" != "${cand}" ]]; then
            echo "‚ùå Parallel-Deploy erkannt: latestCreatedRevisionName=${latest} (expected ${cand})"
            exit 24
          fi

          # 2) Zust√§nde der Kandidaten-Revision
          ready="$(gcloud run revisions describe "${cand}" --region europe-west6 --format="value(status.conditions[?type=Ready].status)")"
          reason_ready="$(gcloud run revisions describe "${cand}" --region europe-west6 --format="value(status.conditions[?type=Ready].reason)")"
          active_status="$(gcloud run revisions describe "${cand}" --region europe-west6 --format="value(status.conditions[?type=Active].status)")"
          active_reason="$(gcloud run revisions describe "${cand}" --region europe-west6 --format="value(status.conditions[?type=Active].reason)")"

          printf '  [%02d/80] Ready=%s (Reason=%s)  Active=%s (Reason=%s)\n' \
            "$i" "${ready:-?}" "${reason_ready:--}" "${active_status:--}" "${active_reason:--}"

          # 3) HealthCheckContainerError -> sofort abbrechen
          [[ "${reason_ready:-}" == *HealthCheckContainerError* ]] && { echo "‚ùå HealthCheckContainerError"; exit 20; }

          # 4) Retired -> klarer Abbruch (jemand hat √ºberholt)
          [[ "${active_reason:-}" == Retired ]] && { echo "‚ùå Revision retired (Parallel-Deploy)"; exit 25; }

          # 5) Fertig?
          [[ "${ready}" == "True" ]] && break
          sleep 6
        done

        [[ "${ready:-}" == "True" ]] || { echo "‚ùå Ready nicht erreicht"; exit 21; }

        rev_url="$(gcloud run revisions describe "${cand}" --region europe-west6 --format='value(status.url)')"
        test -n "${rev_url}" || { echo "‚ùå keine Revision-URL"; exit 22; }

        echo "ü©∫ GET ${rev_url%/}/webhook/health"
        code="$(curl -sS -m 15 -o /dev/null -w '%{http_code}' "${rev_url%/}/webhook/health" || true)"
        echo "   ‚Üí HTTP ${code}"
        [[ "${code}" == "200" ]] || { echo "‚ùå Health != 200"; exit 23; }

        echo "üîÅ traffic ‚Üí ${cand}=100"
        gcloud run services update-traffic foodbot --region europe-west6 --to-revisions "${cand}=100"
        echo "‚úÖ done."

images:
  - europe-west6-docker.pkg.dev/$PROJECT_ID/foodbot/foodbot:$COMMIT_SHA
