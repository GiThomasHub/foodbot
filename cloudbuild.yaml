options:
  logging: CLOUD_LOGGING_ONLY
timeout: "1200s"

steps:
  - id: "Build image"
    name: "gcr.io/cloud-builders/docker"
    args: ["build",
           "-t", "europe-west6-docker.pkg.dev/$PROJECT_ID/foodbot/foodbot:$COMMIT_SHA",
           "."]

  - id: "Push image"
    name: "gcr.io/cloud-builders/docker"
    args: ["push",
           "europe-west6-docker.pkg.dev/$PROJECT_ID/foodbot/foodbot:$COMMIT_SHA"]

  - id: "Deploy (0% traffic)"
    name: "gcr.io/google.com/cloudsdktool/cloud-sdk:slim"
    entrypoint: bash
    args:
      - -ceu
      - |
        set -eo pipefail
        REGION="europe-west6"
        SERVICE="foodbot"
        IMAGE="europe-west6-docker.pkg.dev/${PROJECT_ID}/foodbot/foodbot:${COMMIT_SHA}"

        echo "üñº  Image: ${IMAGE}"
        gcloud run deploy "${SERVICE}" \
          --region="${REGION}" \
          --image="${IMAGE}" \
          --no-traffic \
          --port=8080 \
          --allow-unauthenticated \
          --set-secrets=TELEGRAM_API_KEY=TELEGRAM_API_KEY:latest,OPENAI_API_KEY=OPENAI_API_KEY:latest,GITHUB_TOKEN=GITHUB_TOKEN:latest,TELEGRAM_WEBHOOK_SECRET=TELEGRAM_WEBHOOK_SECRET:latest,GOOGLE_CRED_JSON=GOOGLE_CRED_JSON:latest

        CAND="$(gcloud run services describe "${SERVICE}" --region "${REGION}" --format='value(status.latestCreatedRevisionName)')"
        echo "üë§ Candidate: ${CAND}"
        test -n "${CAND}" && echo -n "${CAND}" > /workspace/candidate.txt

  - id: "Ready + Health + Traffic"
    name: "gcr.io/google.com/cloudsdktool/cloud-sdk:slim"
    entrypoint: bash
    args:
      - -ceu
      - |
        set -euo pipefail
        REGION="europe-west6"
        SERVICE="foodbot"
        CAND="$(cat /workspace/candidate.txt)"

        dump_logs() {
          echo "üìú Logs ${CAND}:"
          gcloud logging read \
            "resource.type=cloud_run_revision AND resource.labels.service_name=${SERVICE} AND resource.labels.revision_name=${CAND}" \
            --limit=200 --order=desc --format='value(textPayload)' || true
        }
        trap 'echo "‚ùå Fehler"; dump_logs' ERR

        echo "‚è≥ Wait Ready=True ..."
        for i in $(seq 1 80); do
          READY="$(gcloud run revisions describe "${CAND}" --region "${REGION}" --format="value(status.conditions[?type=Ready].status)")"
          REASON="$(gcloud run revisions describe "${CAND}" --region "${REGION}" --format="value(status.conditions[?type=Ready].reason)")"
          printf "  [%02d/80] Ready=%s Reason=%s\n" "$i" "${READY:-?}" "${REASON:--}"
          [[ "${REASON:-}" == *HealthCheckContainerError* ]] && { echo "‚ùå HealthCheckContainerError"; exit 20; }
          [[ "${READY}" == "True" ]] && break
          sleep 6
        done
        [[ "${READY:-}" == "True" ]] || { echo "‚ùå Ready wurde nicht erreicht"; exit 21; }

        REV_URL="$(gcloud run revisions describe "${CAND}" --region "${REGION}" --format='value(status.url)')"
        [[ -n "${REV_URL}" ]] || { echo "‚ùå Keine Revision-URL"; exit 22; }
        echo "ü©∫ GET ${REV_URL%/}/webhook/health"
        CODE="$(curl -sS -m 15 -o /dev/null -w '%{http_code}' "${REV_URL%/}/webhook/health" || true)"
        echo "   ‚Üí HTTP ${CODE}"
        [[ "${CODE}" == "200" ]] || { echo "‚ùå Health != 200"; exit 23; }

        echo "üîÅ Traffic ‚Üí ${CAND}=100"
        gcloud run services update-traffic "${SERVICE}" --region "${REGION}" --to-revisions "${CAND}=100"
        echo "‚úÖ Done."

images:
  - "europe-west6-docker.pkg.dev/$PROJECT_ID/foodbot/foodbot:$COMMIT_SHA"
