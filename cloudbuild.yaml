# Cloud Build: Blue/Green mit tag-basiertem Health-Check und hartem 100%-Switch
# Region/Service hart codiert (europe-west6 / foodbot). Keine freien substitutions.
timeout: "1800s"  # 30 min Puffer

steps:
  # 1) Docker build & push nach Artifact Registry
  - name: gcr.io/cloud-builders/docker
    id: Build Image
    args:
      - "build"
      - "-t"
      - "europe-west6-docker.pkg.dev/$PROJECT_ID/foodbot/foodbot:$COMMIT_SHA"
      - "."
  - name: gcr.io/cloud-builders/docker
    id: Push Image
    args:
      - "push"
      - "europe-west6-docker.pkg.dev/$PROJECT_ID/foodbot/foodbot:$COMMIT_SHA"

  # 2) Deploy nach Cloud Run mit 0% Traffic + TAG=cand (nur f√ºr Health-Check-Routing)
  - name: gcr.io/google.com/cloudsdktool/cloud-sdk:slim
    id: Deploy 0% + tag=cand
    entrypoint: bash
    args:
      - -ceu
      - |
        set -o pipefail
        REGION="europe-west6"
        SERVICE="foodbot"
        IMG="europe-west6-docker.pkg.dev/$PROJECT_ID/foodbot/foodbot:$COMMIT_SHA"

        echo "‚Üí Deploy ${SERVICE} in ${REGION} mit Image ${IMG} (0% Traffic, tag=cand)"
        gcloud run deploy "${SERVICE}" \
          --region="${REGION}" \
          --image="${IMG}" \
          --no-traffic \
          --tag="cand" \
          --set-secrets=TELEGRAM_API_KEY=TELEGRAM_API_KEY:latest,OPENAI_API_KEY=OPENAI_API_KEY:latest,GITHUB_TOKEN=GITHUB_TOKEN:latest,TELEGRAM_WEBHOOK_SECRET=TELEGRAM_WEBHOOK_SECRET:latest,GOOGLE_CRED_JSON=GOOGLE_CRED_JSON:latest \
          --quiet

        CAND="$(gcloud run services describe "${SERVICE}" --region "${REGION}" --format='value(status.latestCreatedRevisionName)')"
        echo "üÜï Candidate-Revision: ${CAND}"
        echo "CAND=${CAND}" > /workspace/_cand.env

  # --- Step 2: Ready + Health + Traffic (robust) ---
  - name: gcr.io/google.com/cloudsdktool/cloud-sdk:slim
    id: "Ready + Health + Traffic"
    entrypoint: bash
    args:
      - -ceu
      - |
        PROJECT_ID="${PROJECT_ID:?}"
        REGION="${REGION:?}"
        SERVICE="${SERVICE:?}"
        COMMIT_SHA="${COMMIT_SHA:?}"

        IMAGE="europe-west6-docker.pkg.dev/${PROJECT_ID}/foodbot/foodbot:${COMMIT_SHA}"
        echo "üñº  Image: ${IMAGE}"
        echo "üöÄ Deploy ${SERVICE} in ${REGION} (0% traffic)..."

        gcloud run deploy "${SERVICE}" \
          --region="${REGION}" \
          --image="${IMAGE}" \
          --no-traffic \
          --quiet

        # Kandidatenrevision (neueste erzeugte)
        CAND="$(gcloud run revisions list \
          --service="${SERVICE}" --region="${REGION}" \
          --format="value(metadata.name)" \
          --sort-by="~metadata.creationTimestamp" --limit=1)"
        test -n "${CAND}" || { echo "‚ùå Konnte Kandidaten-Revision nicht ermitteln."; exit 10; }
        echo "üë§ Candidate: ${CAND}" | tee /workspace/candidate.txt

        # kleine Helper-Funktion: Feld robust aus JSON ziehen
        jget () {
          python3 - "$1" << 'PY'
  import sys, json
  field = sys.argv[1]
  d = json.load(sys.stdin)
  conds = d.get("status", {}).get("conditions", [])
  def val(t, k):
      for c in conds:
          if c.get("type")==t:
              return c.get(k, "")
      return ""
  if field=="ready.status":  print(val("Ready","status"))
  elif field=="ready.reason": print(val("Ready","reason"))
  elif field=="ready.msg":    print(val("Ready","message"))
  elif field=="active.status":print(val("Active","status"))
  elif field=="url":          print(d.get("status",{}).get("url","") or d.get("status",{}).get("address",{}).get("url",""))
  PY
        }

        echo "‚è≥ warte bis Ready‚Ä¶"
        for i in $(seq 1 80); do
          JSON="$(gcloud run revisions describe "${CAND}" --region="${REGION}" --format=json || true)"
          READY="$(printf '%s' "$JSON" | jget ready.status | tr -d '\r')"
          ACTIVE="$(printf '%s' "$JSON" | jget active.status | tr -d '\r')"
          RREASON="$(printf '%s' "$JSON" | jget ready.reason | tr -d '\r')"
          printf "  [%02d/80] Ready=%s  AReason=%s  RReason=%s\n" "$i" "${READY:-?}" "${ACTIVE:-?}" "${RREASON:- -}"

          if [ "${READY}" = "True" ]; then
            break
          fi
          sleep 2
        done

        if [ "${READY}" != "True" ]; then
          echo "üìú Letzte Logs f√ºr ${CAND}:"
          gcloud logging read \
            "resource.type=cloud_run_revision AND resource.labels.service_name=${SERVICE} AND resource.labels.revision_name=${CAND}" \
            --limit=100 --freshness=30m --format="value(textPayload)"
          echo "‚ùå Ready not reached"; exit 21
        fi

        REV_URL="$(printf '%s' "$JSON" | jget url)"
        test -n "${REV_URL}" || { echo "‚ùå Keine Revision-URL ermittelt."; exit 23; }
        echo "üåê Revision-URL: ${REV_URL}"

        echo "ü©∫ Health (Kandidat): GET ${REV_URL%/}/webhook/health"
        CODE_CAND="$(curl -sS -m 15 -o /dev/null -w '%{http_code}' "${REV_URL%/}/webhook/health" || true)"
        echo "   ‚Üí HTTP ${CODE_CAND}"
        [ "${CODE_CAND}" = "200" ] || { echo "‚ùå Health-Check fehlgeschlagen."; exit 24; }

        # optional: Live-Health nur informativ
        SVC_URL="$(gcloud run services describe "${SERVICE}" --region="${REGION}" --format='value(status.url)' || true)"
        if [ -n "${SVC_URL}" ]; then
          CODE_LIVE="$(curl -sS -m 10 -o /dev/null -w '%{http_code}' "${SVC_URL%/}/webhook/health" || true)"
          echo "‚ÑπÔ∏è  Live-Service Health: ${CODE_LIVE:-N/A}"
        fi

        echo "üîÅ Traffic ‚Üí ${CAND} (100%) ..."
        gcloud run services update-traffic "${SERVICE}" --region="${REGION}" --to-revisions "${CAND}=100"
        echo "üéâ Fertig ‚Äì 100% Traffic auf ${CAND}"


images:
  - "europe-west6-docker.pkg.dev/$PROJECT_ID/foodbot/foodbot:$COMMIT_SHA"
