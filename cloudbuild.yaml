options:
  logging: CLOUD_LOGGING_ONLY
  substitutionOption: ALLOW_LOOSE

steps:
  # 0) Build
  - name: gcr.io/cloud-builders/docker
    args:
      - build
      - -t
      - europe-west6-docker.pkg.dev/$PROJECT_ID/foodbot/foodbot:$COMMIT_SHA
      - .

  # 1) Push
  - name: gcr.io/cloud-builders/docker
    args:
      - push
      - europe-west6-docker.pkg.dev/$PROJECT_ID/foodbot/foodbot:$COMMIT_SHA

  # 2) Sanity-Check: Libs im Image vorhanden?
  - id: verify-deps-inside-image
    name: gcr.io/cloud-builders/docker
    args:
      - run
      - --rm
      - europe-west6-docker.pkg.dev/$PROJECT_ID/foodbot/foodbot:$COMMIT_SHA
      - python
      - -c
      - |
        import importlib.metadata as md
        import telegram, telegram.ext, tornado
        print("PTB =", md.version('python-telegram-bot'))
        print("tornado =", md.version('tornado'))
        print("IMAGE DEPS OK")

  # 3) Deploy ohne Traffic (Canary-Kandidat)
  - id: deploy-no-traffic
    name: gcr.io/google.com/cloudsdktool/cloud-sdk
    entrypoint: gcloud
    args:
      - run
      - deploy
      - foodbot
      - --image=europe-west6-docker.pkg.dev/$PROJECT_ID/foodbot/foodbot:$COMMIT_SHA
      - --region=europe-west6
      - --allow-unauthenticated
      - --no-traffic
      - --port=8080
      - --set-secrets=TELEGRAM_API_KEY=TELEGRAM_API_KEY:latest
      - --set-secrets=OPENAI_API_KEY=OPENAI_API_KEY:latest
      - --set-secrets=GITHUB_TOKEN=GITHUB_TOKEN:latest
      - --set-secrets=TELEGRAM_WEBHOOK_SECRET=TELEGRAM_WEBHOOK_SECRET:latest
      - --set-secrets=GOOGLE_CRED_JSON=GOOGLE_CRED_JSON:latest
      - --set-env-vars=ROLL_OUT=$COMMIT_SHA

  # 4) Warten bis Revision "Ready" (robust via JSON+Python)
  - id: wait-ready
    name: gcr.io/google.com/cloudsdktool/cloud-sdk
    entrypoint: bash
    args:
      - -ceu
      - |
        set -o pipefail
        REGION=europe-west6
        SERVICE=foodbot

        rev="$(gcloud run services describe "$SERVICE" --region="$REGION" --format='value(status.latestCreatedRevisionName)')"
        echo "Candidate revision: $rev"

        get_field () {
          # $1: status|reason|message
          gcloud run revisions describe "$rev" --region="$REGION" --format=json \
          | python3 - "$1" <<'PY'
import sys, json
data=json.load(sys.stdin)
want=sys.argv[1]
for c in data.get("status", {}).get("conditions", []):
    if c.get("type") == "Ready":
        if want == "status":  print(c.get("status", ""))
        elif want == "reason": print(c.get("reason", ""))
        elif want == "message": print(c.get("message", ""))
        break
PY
        }

        # bis ~8 Minuten (80 * 6s)
        for i in $(seq 1 80); do
          ready="$(get_field status)"
          reason="$(get_field reason)"
          echo "Iter $i: Ready=${ready:-<empty>} Reason=${reason:-<empty>}"

          if [ "$ready" = "True" ]; then
            echo "✅ $rev is Ready"
            exit 0
          fi

          if [ "$reason" = "HealthCheckContainerError" ]; then
            echo "❌ $rev failed health check:"
            get_field message || true
            exit 2
          fi

          sleep 6
        done

        echo "❌ Revision not Ready in time"
        echo "Last conditions:"
        gcloud run revisions describe "$rev" --region="$REGION" --format="yaml(status.conditions)"
        exit 1

  # 5) Traffic auf die neueste Ready-Revision schalten
  - id: shift-traffic
    name: gcr.io/google.com/cloudsdktool/cloud-sdk
    entrypoint: gcloud
    args:
      - run
      - services
      - update-traffic
      - foodbot
      - --region=europe-west6
      - --to-latest

images:
  - europe-west6-docker.pkg.dev/$PROJECT_ID/foodbot/foodbot:$COMMIT_SHA
