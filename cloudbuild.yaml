# Cloud Build Blue/Green f√ºr foodbot
# - Build & Push Image (Artifact Registry)
# - Deploy auf Cloud Run mit 0% Traffic
# - Warten bis Ready=True (max ~8 Min); HealthCheckContainerError -> sofort FAIL
# - Health-Check 200 auf /webhook/health gegen die **Kandidaten-Revision** (Revision-URL)
# - Nur bei OK: Traffic 100% auf Kandidat
# - Bei Fehler: sauber FAIL + kompakter Log-Dump der Revision
#
# Anforderungen:
# - Keine freien Substitutions, wir nutzen nur $PROJECT_ID und $COMMIT_SHA
# - Region/Service hart codiert (europe-west6 / foodbot)

options:
  logging: CLOUD_LOGGING_ONLY            # erf√ºllt Build-Logging-Vorgabe bei Trigger-SA
  substitutionOption: ALLOW_LOOSE        # erlaubt lokalen Test mit COMMIT_SHA-Override
timeout: "1200s"

steps:
# 1) Docker Build
- name: gcr.io/cloud-builders/docker
  id: Build image
  args:
    - build
    - -t
    - europe-west6-docker.pkg.dev/$PROJECT_ID/foodbot/foodbot:$COMMIT_SHA
    - .

# 2) Push
- name: gcr.io/cloud-builders/docker
  id: Push image
  args:
    - push
    - europe-west6-docker.pkg.dev/$PROJECT_ID/foodbot/foodbot:$COMMIT_SHA

# 3) Deploy NO-TRAFFIC
- name: gcr.io/google.com/cloudsdktool/cloud-sdk:slim
  id: Deploy (0% traffic)
  entrypoint: bash
  args:
    - -ceu
    - |
      set -eo pipefail
      REGION="europe-west6"
      SERVICE="foodbot"
      IMAGE="europe-west6-docker.pkg.dev/${PROJECT_ID}/foodbot/foodbot:${COMMIT_SHA}"

      echo "üñº  Image: ${IMAGE}"
      echo "üöÄ Deploy ${SERVICE} in ${REGION} (0% traffic)..."
      gcloud run deploy "${SERVICE}" \
        --region="${REGION}" \
        --image="${IMAGE}" \
        --no-traffic \
        --port=8080 \
        --allow-unauthenticated \
        --set-secrets=TELEGRAM_API_KEY=TELEGRAM_API_KEY:latest,OPENAI_API_KEY=OPENAI_API_KEY:latest,GITHUB_TOKEN=GITHUB_TOKEN:latest,TELEGRAM_WEBHOOK_SECRET=TELEGRAM_WEBHOOK_SECRET:latest,GOOGLE_CRED_JSON=GOOGLE_CRED_JSON:latest

      CAND="$(gcloud run revisions list --region="${REGION}" --service="${SERVICE}" \
               --format='value(metadata.name)' --sort-by=~metadata.creationTimestamp --limit=1)"
      test -n "${CAND}" || { echo "‚ùå Konnte Kandidaten-Revision nicht ermitteln."; exit 10; }
      echo "üë§ Candidate: ${CAND}" | tee /workspace/candidate.txt

# 4) Wait ‚Üí Health ‚Üí Traffic (mit Fehler-Trap + Log-Dump)
- name: gcr.io/google.com/cloudsdktool/cloud-sdk:slim
  id: Ready + Health + Traffic
  entrypoint: bash
  args:
    - -ceu
    - |
      set -euo pipefail
      REGION="europe-west6"
      SERVICE="foodbot"
      CAND="$(cat /workspace/candidate.txt)"

      dump_logs() {
        echo "üìú Letzte Logs f√ºr ${CAND}:"
        gcloud logging read \
          "resource.type=cloud_run_revision AND resource.labels.service_name=${SERVICE} AND resource.labels.revision_name=${CAND}" \
          --limit=200 --format="value(textPayload)" || true
      }
      trap 'echo "‚ùå Fehler ‚Äì breche ab."; dump_logs' ERR

      echo "‚è≥ Warte auf Ready=True (max ~8 Min)..."
      for i in $(seq 1 80); do
        READY="$(gcloud run revisions describe "${CAND}" --region="${REGION}" --format="value(status.conditions[?type=Ready].status)")"
        REASON="$(gcloud run revisions describe "${CAND}" --region="${REGION}" --format="value(status.conditions[?type=Ready].reason)")"
        MSG="$(gcloud run revisions describe "${CAND}" --region="${REGION}" --format="value(status.conditions[?type=Ready].message)")"
        ACTIVE="$(gcloud run revisions describe "${CAND}" --region="${REGION}" --format="value(status.conditions[?type=Active].status)")"
        printf "  [%02d/80] Ready=%s Active=%s Reason=%s\n" "$i" "${READY:-?}" "${ACTIVE:-?}" "${REASON:--}"

        if [[ "${REASON:-}" == *HealthCheckContainerError* ]]; then
          echo "‚ùå HealthCheckContainerError ‚Äì sofortiger Abbruch."
          exit 20
        fi
        if [[ "${REASON:-}" == *Retired* ]]; then
          echo "‚ùå Revision retired (vermutlich Parallel-Deploy)."
          exit 21
        fi
        if [[ "${READY}" == "True" ]]; then
          echo "‚úÖ Ready=True"
          break
        fi
        sleep 6
      done
      [[ "${READY:-}" == "True" ]] || { echo "‚ùå Kandidat wurde nicht Ready."; exit 22; }

      # Revision-URL bestimmen (direkt diese 0%-Revision pr√ºfen!)
      REV_URL="$(gcloud run revisions describe "${CAND}" --region="${REGION}" --format="value(status.url)")"
      if [[ -z "${REV_URL}" ]]; then
        REV_URL="$(gcloud run revisions describe "${CAND}" --region="${REGION}" --format="value(status.address.url)")"
      fi
      test -n "${REV_URL}" || { echo "‚ùå Konnte Revision-URL nicht ermitteln."; exit 23; }
      echo "üåê Revision-URL: ${REV_URL}"

      echo "ü©∫ Health (Kandidat): GET ${REV_URL%/}/webhook/health"
      CODE_CAND="$(curl -sS -m 15 -o /dev/null -w '%{http_code}' "${REV_URL%/}/webhook/health" || true)"
      echo "   ‚Üí HTTP ${CODE_CAND}"
      [[ "${CODE_CAND}" == "200" ]] || { echo "‚ùå Health-Check fehlgeschlagen."; exit 24; }

      # (optional) nur Logging: Health des Live-Service
      SVC_URL="$(gcloud run services describe "${SERVICE}" --region="${REGION}" --format='value(status.url)')"
      if [[ -n "${SVC_URL}" ]]; then
        CODE_LIVE="$(curl -sS -m 10 -o /dev/null -w '%{http_code}' "${SVC_URL%/}/webhook/health" || true)"
        echo "‚ÑπÔ∏è  Live-Service Health: ${CODE_LIVE:-N/A}"
      fi

      echo "üîÅ Traffic ‚Üí ${CAND} (100%) ..."
      gcloud run services update-traffic "${SERVICE}" --region="${REGION}" --to-revisions "${CAND}=100"
      echo "üéâ Fertig ‚Äì 100% Traffic auf ${CAND}"

images:
- europe-west6-docker.pkg.dev/$PROJECT_ID/foodbot/foodbot:$COMMIT_SHA
